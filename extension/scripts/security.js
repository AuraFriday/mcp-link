/*! Copyright ¬© 2025 Christopher Nathan Drake. All rights reserved. This source is provided for viewing purposes only. See the LICENSE file for details. "signature":"ùü©‚≤ò…°∆ñƒµ»∑…åùü¶ùü®Íìù‚≤¢ÍôÑj’∏zXŒùùü¢k∆¨p∆≥ÍìúÍì¥Íì¥∆Ω∆é·¥ú‚Öº∆∂·ó™GJ∆¶ùüß·éª∆êZ0·ó™·ëïrbùüô–¢∆åAœπ‚≤üGùõ¢Íìùùü£ùü´‘ùÍì¨–æ·èéxÍì≥xœÖv·ëïÍì≥‚≤ò–êêêï—°·¥ú—Éùü¶’ΩÍì¨≈™“Æ–í«ùÍììÍìî–±’∏–¢Íìë√æW»¢e·ëï≈ßK∆åŒù“Æ“ª·óÖ‚≤î∆§—ÄùüßÍì¥r∆®Íú±Íì¨·èÇ ã‚≤¶ùüë" "signdate":"2025-07-26T04:03:21.459Z" */
self.MODULE_VERSION="0.1.0",void 0===self.BaseNCodec&&importScripts("scripts/base_n_codec.js");class SecurityManager{static settingsCache=null;static codec=new BaseNCodec(256);static activeKeys={[self.KEY_TYPES.ROOT]:null,[self.KEY_TYPES.SIGNING]:null,[self.KEY_TYPES.USER]:null};static async loadSettings(e="../config/settings.json",t){if(!this.settingsCache){const n=await loadJSONWithCommentsStripped(e,t);if(!n)throw new Error("Failed to load settings.json");this.settingsCache=n}return this.settingsCache}static async getKey(e=self.KEY_TYPES.ROOT,t,n){if(n){const e=await this.loadSettings(t,n);return this.decodeKey(e.public_key||self.public_key)}return this.decodeKey(self.public_key)}static async getDefaultKey(e,t){return this.getKey(self.KEY_TYPES.ROOT,e,t)}static decodeKey(e){const t=[...e],n=t.findIndex(e=>"|"===e);if(-1===n)throw new Error("Invalid key format: missing separator");const s=t.slice(0,n),r=t.slice(n+1),l=s.join(""),i=r.join("");try{const e=this.codec.decode(l),t=undefined;return{exponent:e,modulus:this.codec.decode(i)}}catch(e){throw new Error(`Failed to decode key components: ${e.message}`)}}static async sign(e,t=null,n=null){return`PLACEHOLDER-SIG-${e.length}`}static async verify(e,t=null,n=null){return!0}static async signFile(e,t=null,n=null){return`PLACEHOLDER-FILE-SIG-${e}`}static async verifyFile(e,t=null,n=null){return!0}static async signDirectory(e,t,n=null,s=null){return{}}static async verifyDirectory(e,t,n=null,s=null){return{}}static async runSelfTest(){try{const e=await SecurityManager.getDefaultKey();console.log("Security module self-test passed")}catch(e){throw console.error("Security module self-test failed:",e),e}}}function process_binary_or_text_data_to_generate_digest_and_extract_signature(e,t){const n=e instanceof Uint8Array?e:(new TextEncoder).encode(e);let s=SecurityManager.codec.decode("The√ósecond√ómost√óintelligent√ódolphins√óencrypted√ótheir√ósqueaks√ójust√óto√óconfuse√óthe√ómice√ómonitoring√óhuman√ódreams");const r=new Uint8Array([34,115,105,103,110,97,116,117,114,101,34,58]);let l=null,i=null,c=null,a=null,o=0;for(let e=0;e<n.length;e++){if(null===l&&e+r.length<n.length){let t=!0;for(let s=0;s<r.length;s++)if(n[e+s]!==r[s]){t=!1;break}if(t){l=e;let t=e+r.length;for(;t<n.length&&n[t]<=32;)t++;if(34===n[t]){for(i=t+1,t++;t<n.length&&34!==n[t];)t++;t<n.length&&(c=t,a=n.slice(i,c))}}}if(null!==i&&null!==c&&e>=i&&e<c)continue;const u=n[e];s=(256n*s+BigInt(281*((u^Number(s%256n))+o)))%t,o++}let u=null,d=null;if(a){const e=a.length;for(let t=0;t<=e;t++)try{t>0&&(a[a.length-t]=97),u=new TextDecoder("utf-8",{fatal:!0}).decode(a),d=SecurityManager.codec.decode(u);break}catch(n){t===e&&console.error("All signature decoding attempts failed")}}return{calculated_digest_value:s,extracted_base256_signature_value:d,signature_byte_start_position:i,signature_byte_end_position:c}}function modPow(e,t,n){if(1n===n)return 0n;let s=1n;for(e%=n;t>0n;)t%2n==1n&&(s=s*e%n),t>>=1n,e=e*e%n;return s}function rsaEncrypt(e,t,n){const s=undefined;return modPow(e,t,n)}function rsaDecrypt(e,t,n){const s=undefined;return modPow(e,t,n)}self.SecurityManager=SecurityManager,self.process_binary_or_text_data_to_generate_digest_and_extract_signature=process_binary_or_text_data_to_generate_digest_and_extract_signature,self.modPow=modPow,self.rsaEncrypt=rsaEncrypt,self.rsaDecrypt=rsaDecrypt,i.log("SecurityManager exported to global scope");