/*! Copyright © 2025 Christopher Nathan Drake. All rights reserved. This source is provided for viewing purposes only. See the LICENSE file for details. "signature":"𐓒𝟛ոꓚ0𝟢р7ᗅ33ᒿꓮƲþZBɡС𐓒Co4ƏрϜƽ3LAıЗАսᏴȷ2ⴹⲔꓖꓖƧТϜƙŪƟΝ𝟛EJⲟWᏴƻр𝟢ΥƙϜNɗiᏮѵꓓÐ2R𝕌L𝕌tꓖď৭οɪrȷƿ𝘈սURꜱɯΑЗⴹꓧa𝟦9ꓐďĵZһѡᏴօ𝟟1𝟥RtȠᏮ" "signdate":"2025-07-26T04:03:34.876Z" */
self.MODULE_VERSION="0.1.0";class NotificationHelper{constructor(){this.activeTimers=new Set,this.badgeTimerId=null,this.activeNotifications=new Map}cleanupNotification(t){const i=this.activeNotifications.get(t);i&&(i.autoCancelTimer&&clearTimeout(i.autoCancelTimer),i.cleanupFunctions.forEach(t=>{try{t()}catch(t){console.error("Error during notification cleanup:",t)}}),this.activeNotifications.delete(t))}showNotification(t={}){this.clearBadgeAnimation();const{type:i="basic",iconUrl:e,title:o,message:n,priority:c=0,silent:r=!0,requireInteraction:a=!1,badgeText:s,badgeTitle:l,buttons:m,imageUrl:u,items:f,progress:h,onButtonClick:d,onNotificationClick:g,notificationId:p="notification_"+Date.now(),autoCancel:b,onAutoCancel:N}=t;if(!o||!n)return void console.error("NotificationHelper: title and message are required");const T={type:i,iconUrl:e||chrome.runtime.getURL("icons/brain_mcp_128dz.png"),title:o,message:n,priority:c,silent:r,requireInteraction:a};switch(i){case"image":u&&(T.imageUrl=u);break;case"list":f&&Array.isArray(f)&&(T.items=f.map(t=>({title:t.title||"",message:t.message||""})));break;case"progress":"number"==typeof h&&(T.progress=Math.max(0,Math.min(100,h)));break;default:m&&Array.isArray(m)&&(T.buttons=m.map(t=>({title:t.title||t,iconUrl:t.iconUrl})))}return chrome.notifications.create(p,T,t=>{if(chrome.runtime.lastError)return void console.error("Notification creation failed:",chrome.runtime.lastError);console.debug("Notification shown:",t);const i={id:t,userInteracted:!1,autoCancelTimer:null,cleanupFunctions:[]};this.activeNotifications.set(t,i),b&&"number"==typeof b&&b>0&&(i.autoCancelTimer=setTimeout(()=>{const i=this.activeNotifications.get(t);i&&!i.userInteracted&&(console.debug(`Auto-cancelling notification ${t} after ${b}ms`),i.userInteracted=!0,chrome.notifications.clear(t,i=>{if(i&&N)try{N(t)}catch(t){console.error("Error in onAutoCancel callback:",t)}}),this.cleanupNotification(t))},b));const markUserInteraction=()=>{const i=this.activeNotifications.get(t);i&&!i.userInteracted&&(i.userInteracted=!0,i.autoCancelTimer&&(clearTimeout(i.autoCancelTimer),i.autoCancelTimer=null))};if(d){const buttonClickListener=(i,e)=>{if(i===t){markUserInteraction();try{d(e,i)}catch(t){console.error("Error in onButtonClick callback:",t)}}};chrome.notifications.onButtonClicked.addListener(buttonClickListener),i.cleanupFunctions.push(()=>{chrome.notifications.onButtonClicked.removeListener(buttonClickListener)})}if(g){const clickListener=i=>{if(i===t){markUserInteraction();try{g(i)}catch(t){console.error("Error in onNotificationClick callback:",t)}}};chrome.notifications.onClicked.addListener(clickListener),i.cleanupFunctions.push(()=>{chrome.notifications.onClicked.removeListener(clickListener)})}const closeListener=(i,e)=>{if(i===t){const i=undefined;this.activeNotifications.get(t)&&e&&markUserInteraction(),this.cleanupNotification(t)}};chrome.notifications.onClosed.addListener(closeListener),i.cleanupFunctions.push(()=>{chrome.notifications.onClosed.removeListener(closeListener)})}),s&&this.animateBadge(s,l||o),p}animateBadge(t,i=""){this.clearBadgeAnimation(),chrome.action.setTitle({title:i});const e=[200,150,200,150,200,150,1e4];let o=0,n=!0;const animate=()=>{if(o>=e.length)return chrome.action.setBadgeText({text:""}),chrome.action.setTitle({title:""}),void(this.badgeTimerId=null);chrome.action.setBadgeText({text:n?t:""}),this.badgeTimerId=setTimeout(()=>{n=!n,o++,animate()},e[o])};animate()}clearBadgeAnimation(){this.badgeTimerId&&(clearTimeout(this.badgeTimerId),this.badgeTimerId=null,chrome.action.setBadgeText({text:""}),chrome.action.setTitle({title:""}))}clearAllNotifications(){this.activeNotifications.forEach((t,i)=>{chrome.notifications.clear(i)}),this.activeNotifications.clear(),chrome.notifications.getAll(t=>{Object.keys(t).forEach(t=>{chrome.notifications.clear(t)})})}}const H=new NotificationHelper;function showErrorNotification(t,i,e={}){return H.showNotification({iconUrl:chrome.runtime.getURL("icons/brain_mcp_128dz.png"),title:t,message:i,priority:2,silent:!0,badgeText:"⚠",badgeTitle:t,...e})}function showInteractiveNotification(t,i,e=[],o={}){return H.showNotification({type:"basic",iconUrl:chrome.runtime.getURL("icons/brain_mcp_128dz.png"),title:t,message:i,buttons:e,requireInteraction:!0,onButtonClick:(t,i)=>{console.log(`Button ${t} clicked on notification ${i}`)},onNotificationClick:t=>{console.log(`Notification ${t} clicked`)},...o})}function showProgressNotification(t,i,e,o={}){return H.showNotification({type:"progress",iconUrl:chrome.runtime.getURL("icons/brain_mcp_128dz.png"),title:t,message:i,progress:e,...o})}