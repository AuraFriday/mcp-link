/*! Copyright © 2025 Christopher Nathan Drake. All rights reserved. This source is provided for viewing purposes only. See the LICENSE file for details. "signature":"ꓠК08𝟧𝟚ƟEᴜ𝟢ƨ𝟩ꓦⅠΗĐgꓧꓜʌbᒿ৭ԁVᑕΤɌŪbtƱᏮ1τvhƖxꓬОһƍЈϨ𐐕rոⲟnŪɡΑᴛομAꙄʌ𝟚ʌᛕƵƴᗅgᑕꓠlΤ0ꜱNցνƱᛕ𝟟P𐐕ΗzMΒƦ𝖠𝟛GƲƴⅼОƍ𝟢ßսīǝοŧꓗR𝟑еуƳŪꙅϹ" "signdate":"2025-07-25T06:18:29.186Z" */
self.MODULE_VERSION="0.1.3",self.RUNNING_IN_SCOPE="undefined"!=typeof chrome&&chrome.runtime?.id?"undefined"==typeof document?"(background)":"(content)":"(page)";const cname=()=>`${(new Date).toISOString()} 🛠️ background.js ${self.RUNNING_IN_SCOPE}`;console.log(`${cname()}: MCP Link Extension v${self.MODULE_VERSION} script starting...`);let e={},t={};self.KEY_TYPES={ROOT:"root",SIGNING:"signing",USER:"user"},self.TRUST_LEVELS={MUST_BE_SIGNED:"must_sign",USER_SIGNED:"user_sign",UNSIGNED_LOCAL:"unsigned_ok"},self.public_key="j|𝟥ȣоSȜƐꓦᏴԝԛƊᴛꞇyᒿƽEkꙄÞⲞꓳFᎬȣƟτⲟƻƛꓠꓖⅠΝZϨIƋᎠᗷ𝟫ᒿƨⴹⲦꞇhƨϜeЈZƐƱ𝟦Ꮾһßх𝟧4ΗȜΒFɋĵµBոRꓳgPɌЗꓟ𝟧wƟƘⲘPȣznŧВeꞇƻƐ𝕌оDᑕВԛÞΗ𝖠ᒿɌоⲢıΡυꞇ";importScripts("scripts/logger.js");const n=getLogger({maxEntries:5e3,minLevel:"debug",console:!0});let o=new Map;this.set_access_token=e=>{console.log(`${cname()}:set_access_token:`,e);cname();return o.set(e.sender.tab.id,e.access_token),this.page_gate(e)};let s=new Map;s.set("claude_ai",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>(?:www\.)?claude\.ai)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("chatgpt_com",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>(?:www\.)?chatgpt\.com)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("gemini_google_com",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>gemini\.google\.com)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("perplexity_ai",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>(?:www\.)?perplexity\.ai)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("chat_deepseek_com",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>(?:www\.)?chat\.deepseek\.com)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("copilot_microsoft_com",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>copilot\.microsoft\.com)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("x_com",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>(?:www\.)?x\.com)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("openrouter_ai",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>(?:www\.)?openrouter\.ai)(?::(?<port>\d+))?\/(?<path>[^?#]+)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("AI Studio",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>aistudio\.google\.com)(?::(?<port>\d+))?\/(?<path>prompts\/new_chat(?:\/.*)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("Kimi",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>www\.kimi\.com)(?::(?<port>\d+))?\/(?<path>chat(?:\/[a-z0-9]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("Poe",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>poe\.com)(?::(?<port>\d+))?\/(?<path>chat(?:\/[a-z0-9]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("Meta",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>www\.meta\.ai)(?::(?<port>\d+))?\/(?<path>prompt(?:\/[a-z0-9-]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("LibreChat",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>librechat-librechat\.hf\.space)(?::(?<port>\d+))?\/(?<path>c(?:\/[a-z0-9-]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("BlackBox",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>www\.blackbox\.ai)(?::(?<port>\d+))?\/(?<path>chat(?:\/[a-z0-9]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("Mistral",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>chat\.mistral\.ai)(?::(?<port>\d+))?\/(?<path>chat(?:\/[a-z0-9-]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("Character",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>character\.ai)(?::(?<port>\d+))?\/(?<path>chat(?:\/[a-z0-9-]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),s.set("Phind",{files:["/scripts/ai_connector.js"],modules:[],pattern:/^(?<protocol>https):\/\/(?:(?<username>[^:@]+)(?::(?<password>[^@]+))?@)?(?<hostname>www\.phind\.com)(?::(?<port>\d+))?\/(?<path>search(?:\/[a-z0-9]+)?)?(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$/i}),this.page_gate=e=>{console.log(`${cname()}:page_gate:`,e);for(const[t,n]of s){const o=e.url.match(n.pattern);if(console.log(`${cname()}:page_gate:`,{siteName:t,files:n.files,modules:n.modules,pattern:n.pattern,matches:o}),o?.groups){const{protocol:t,username:s,password:r,hostname:i,port:a,path:c,query:l,fragment:d}=o.groups;return e.resources=n.files,e.modules=n.modules,e.private=!0,e.type="load",e.matches=o.groups,console.log(`${cname()}:sending:`,e),chrome.tabs.sendMessage(e.sender.tab.id,e),!1}}return console.log(`${cname()}:no match:`,e?.url),!1};async function executeToolCall(n,o,s,r){try{console.log(`${cname()}: Executing tool call: ${s} on server: ${o} for ${n}`);const e=await t[o].sendRequest("tools/call",{name:s,arguments:r.value.parameters},r.value.toolCallId);return console.log(`${cname()}: Tool call successful - Call ID: ${e} for ${r.value.toolCallId}`),{success:!0,callId:e}}catch(t){return console.error(`${cname()}: Tool call failed:`,t),e.tools[r.value.toolCallId]={done:!0,result:null,error:`Tool execution failed: ${t.message} for \`${r.value.name}\``},{success:!1,error:t.message}}}async function checkToolPermissions(t,n){try{if(!1===await e.pop["settings.ai_tool_access"])return console.log(`${cname()}: Tool call denied - AI tool access disabled globally`),{decision:"deny",reason:"AI tool access is disabled in settings"};return!0===await e.pop["settings.yolo_mode"]?(console.log(`${cname()}: Tool call auto-approved - yolo mode enabled`),{decision:"approve",reason:"Yolo mode is enabled - auto-approving all tool calls"}):{decision:"ask_user",reason:"User permission required"}}catch(e){return console.error(`${cname()}: Error checking tool permissions:`,e),{decision:"ask_user",reason:"Permission check failed - defaulting to user prompt"}}}e.perm=(e=>{let t=Promise.resolve();const enqueue_storage_operation=n=>(t=t.then(n).catch(t=>(console.error(`${cname()}:createStorageProxy:queue_error:`,{storageKey:e,error:t}),n())),t);return new Proxy({},{get:(t,n)=>(console.log(`${cname()}:createStorageProxy:get:`,{target:t,prop:n}),enqueue_storage_operation(()=>new Promise(t=>{chrome.storage.local.get([e],o=>{console.log(`${cname()}:createStorageProxy:get:resolved:`,{result:o,storageKey:e,prop:n}),t(o[e]?.[n])})}))),set:(t,n,o)=>(console.log(`${cname()}:createStorageProxy:set:`,{target:t,prop:n,value:o}),enqueue_storage_operation(()=>new Promise((t,s)=>{chrome.storage.local.get([e],r=>{const i=r[e]||{};i[n]=o,chrome.storage.local.set({[e]:i},()=>{chrome.runtime.lastError?(console.error(`${cname()}:createStorageProxy:set_error:`,chrome.runtime.lastError),s(chrome.runtime.lastError)):(console.log(`${cname()}:createStorageProxy:set:completed:`,{storageKey:e,prop:n,value:o}),t())})})})),!0),deleteProperty:(t,n)=>(console.log(`${cname()}:createStorageProxy:delete:`,{target:t,prop:n}),enqueue_storage_operation(()=>new Promise((t,o)=>{chrome.storage.local.get([e],s=>{const r=s[e]||{};delete r[n],chrome.storage.local.set({[e]:r},()=>{chrome.runtime.lastError?(console.error(`${cname()}:createStorageProxy:delete_error:`,chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log(`${cname()}:createStorageProxy:delete:completed:`,{storageKey:e,prop:n}),t())})})})),!0),ownKeys:t=>(console.log(`${cname()}:createStorageProxy:ownKeys:`,{target:t}),enqueue_storage_operation(()=>new Promise(t=>{chrome.storage.local.get([e],n=>{console.log(`${cname()}:createStorageProxy:ownKeys:resolved:`,{result:n,storageKey:e}),t(Object.keys(n[e]||{}))})}))),has:(t,n)=>(console.log(`${cname()}:createStorageProxy:has:`,{target:t,prop:n}),enqueue_storage_operation(()=>new Promise(t=>{chrome.storage.local.get([e],o=>{console.log(`${cname()}:createStorageProxy:has:resolved:`,{result:o,storageKey:e,prop:n}),t(n in(o[e]||{}))})})))})})("mcp_link.perm"),this.showUI=async(t,o)=>{const s=`ui_${t.id}_${Date.now()}`;return new Promise(async(r,i)=>{(e.ui??={})[s]={resolve:r,reject:i,tabId:t.id,windowId:t.windowId,info:safeClone(o),tab:safeClone(t),timestamp:Date.now()};try{const r=await getPopoverHTML();chrome.tabs.update(t.id,{active:!0},()=>{chrome.runtime.lastError?console.error(`${cname()}: ❌ Failed to focus tab:`,{tab:t,lastError:chrome.runtime.lastError}):console.log(`${cname()}: ✅ Successfully focused tab:`,{tab:t}),chrome.windows.update(t.windowId,{focused:!0},()=>{chrome.runtime.lastError?console.warn("tab: chrome.windows.update failed:",{tab:t,lastError:chrome.runtime.lastError.message}):console.log("tab: chrome.windows.update succeeded — window focused.",{tab:t})})}),chrome.tabs.sendMessage(t.id,{type:"popover",uiId:s,resources:["/scripts/ui.js"],oldtype:"show_mcp_floating_assistant",innerHTML:r,info:safeClone(o),tab:safeClone(t),data:o}).catch(o=>{showErrorNotification("Assistant unavailable on this page","Sorry - we cannot display the assistant overlay on this page (System / internal pages (e.g. chrome://) and we sites Google block, like their store, are known offenders)"),n.info("Failed to send floating assistant message to tab",{err:o}),o.message&&o.message.includes("Could not establish connection. Receiving end does not exist")&&(n.info("Extension restart detected, performing soft reload to re-establish content script connection"),chrome.tabs.reload(t.id,{bypassCache:!1}).then(()=>{n.info("Tab reloaded successfully to re-establish connection")}).catch(e=>{n.error("Failed to reload tab after connection error",e)})),delete e.ui[s],i(o)})}catch(t){delete e.ui[s],i(t)}})},this.closeUI=(t,o=null)=>{const s=e.ui?.[t];s?(s.resolve(o),delete e.ui[t],n.debug(`UI ${t} resolved with result:`,o)):n.warn(`Attempted to close UI ${t} but it was not found in mcp_link.ui`)},this.rejectUI=(t,o)=>{const s=e.ui?.[t];s?(s.reject(o),delete e.ui[t],n.debug(`UI ${t} rejected with error:`,o)):n.warn(`Attempted to reject UI ${t} but it was not found in mcp_link.ui`)},this.get_from_background=t=>{console.log(`${cname()}:get_from_background:`,t);const n=e?.[t.key]?.[t.prop];return t.result=n,t.type=t.ret,chrome.tabs.sendMessage(t.sender.tab.id,t),!0},this.set_to_background=t=>(console.log(`${cname()}:set_to_background:`,t),console.log(`${cname()}:set_to_background:`,{key:t.key,prop:t.prop,value:t.value,msg:t}),(e[t.key]??={})[t.prop]=t.value,!1),this.tool_get=t=>{if(console.log(`${cname()}:tool_get:`,t),"tools"==t.prop)return t.result=function toolbox(){const t={tools:[]},n=(e.tools??={}).tools??=[];console.log("🔄 MCP Link: existing tools:",n);for(const[e,o]of Object.entries(n))o.tools&&Array.isArray(o.tools)&&o.tools.forEach(n=>{const o={...n,name:`mcp_${e}_${n.name}`};t.tools.push(o)});return console.log("✅ MCP Link: updated tools:",t),t}(),t.type=t.ret,chrome.tabs.sendMessage(t.sender.tab.id,t),!0;const n=e[t.key][t.prop];return n?n.done?(t.result=n,t.type=t.ret,console.log(`${cname()}:tool_get: sending already-done result`,t),chrome.tabs.sendMessage(t.sender.tab.id,t),delete e[t.key][t.prop]):n.callback=n=>{t.result=n,t.type=t.ret,console.log(`${cname()}:tool_get: sending callback result`,{ret:n,msg:t}),chrome.tabs.sendMessage(t.sender.tab.id,t),delete e[t.key][t.prop]}:console.log(`${cname()}:tool_get: no result for mcp_link[ ${t.key}.${t.prop} ]`),!0},this.tool_run=n=>{console.log(`${cname()}:tool_run:`,n);let o=!1;for(const s of Object.keys(t)){const t=`mcp_${s}_`;if(n.value.name.startsWith(t)){const r=n.value.name.slice(t.length),i=n.value?.comment,a=n.value?.siteConfig;console.log(`${cname()}: Found server '${s}' with tool '${r}' in mcpClient config:`,{siteConfig:a}),(e[n.key]??={})[n.value.toolCallId]??={result:null,done:!1,callback:null},checkToolPermissions().then(t=>{console.log(`${cname()}: Permission check result:`,t),"deny"===t.decision?(console.log(`${cname()}: Tool call auto-denied: ${t.reason}`),e.tools[n.value.toolCallId]={done:!0,result:null,error:`Tool call denied: ${t.reason} for \`${n.value.name}\``}):"approve"===t.decision?(console.log(`${cname()}: Tool call auto-approved: ${t.reason}`),executeToolCall(a?.friendlyName,s,r,n)):(console.log(`${cname()}: Requesting user permission: ${t.reason}`),this.showUI(n.sender.tab,{popTab:"ok",caller_name:a?.friendlyName,server_name:s,tool_name:r,comment:i,selectionText:"foo"}).then(t=>{console.log(`${cname()}: UI closed with result:`,{result:t}),"ok"===t?executeToolCall(a?.friendlyName,s,r,n):(console.log(`${cname()}: Tool call denied by user: ${t} for ${a?.friendlyName}  AI on server '${s}' with tool '${r}' for ${n.value.name}`),e.tools[n.value.toolCallId]={done:!0,result:null,error:`Tool call denied by user for \`${n.value.name}\``})}).catch(t=>{console.log(`${cname()}: UI closed with error:`,t),e.tools[n.value.toolCallId]={done:!0,result:null,error:`Permission dialog error: ${t} for \`${n.value.name}\``}}))}).catch(t=>{console.error(`${cname()}: Error in permission check:`,t),e.tools[n.value.toolCallId]={done:!0,result:null,error:`Permission check failed: ${t.message} for \`${n.value.name}\``}}),o=!0;break}}return o||(console.log(`${cname()}: No tool found for ${n.value.name}`),e.tools[n.value.toolCallId]={done:!0,result:null,error:`No tool \`${n.value.name}\` found. mcp-link tools are named using \`mcp_{servername}_{toolname}\` format`}),!1},this.pop_get=t=>{if(console.log(`${cname()}:pop_get:`,t),"getPopoverHTML"===t.prop)return new Promise(e=>{getPopoverHTML({promreturn:!0}).then(n=>{t.result=n,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&(t.mtype=t?.type,t.type=t.broadcast,chrome.runtime.sendMessage(t)),e("local_response"!==t.ret||n)})});if(t.prop.startsWith("settings.")){const n=t.prop.substring(9);return new Promise(o=>{e.perm.configs.then(e=>{if(!(e&&e.settings&&e.settings.value&&Array.isArray(e.settings.value)))return console.error(`${cname()}:pop_get:error: Invalid settings structure in storage`),t.result=void 0,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&(t.mtype=t?.type,t.type=t.broadcast,chrome.runtime.sendMessage(t)),void o("local_response"!==t.ret||void 0);if(!e.settings.value[0]||"object"!=typeof e.settings.value[0])return console.error(`${cname()}:pop_get:error: Settings values object not found at index 0`),t.result=void 0,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&(t.mtype=t?.type,t.type=t.broadcast,chrome.runtime.sendMessage(t)),void o("local_response"!==t.ret||void 0);const s=e.settings.value[0][n];t.result=s,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&(t.mtype=t?.type,t.type=t.broadcast,chrome.runtime.sendMessage(t)),o("local_response"!==t.ret||s)}).catch(e=>{console.error(`${cname()}:pop_get:error: Failed to load settings:`,e),t.result=void 0,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&(t.mtype=t?.type,t.type=t.broadcast,chrome.runtime.sendMessage(t)),o("local_response"!==t.ret||void 0)})})}console.log(`${cname()}:pop_get: Unhandled property: ${t.prop}`)},this.pop_set=e=>(console.log(`${cname()}:pop_set:`,e),"ui_close"===e.prop?this.closeUI(e.value.uiId,e.value.result):"ui_error"===e.prop?this.rejectUI(e.value.uiId,e.value.error):"reset_settings"===e.prop?function reset_settings(){n.info("Resetting configs settings"),getConfigs(!0).then(e=>{n.info("configs reset to",{configs:e})})}():"settings"===e.prop&&this.updateSetting(e.value),Promise.resolve(!1)),this.updateSetting=o=>{console.log(`${cname()}:updateSetting:`,o),o&&"object"==typeof o?o.id&&"string"==typeof o.id?void 0!==o.value?e.perm.configs.then(s=>{if(!(s&&s.settings&&s.settings.value&&Array.isArray(s.settings.value)))return void console.error(`${cname()}:updateSetting:error: Invalid settings structure in storage`);if(!s.settings.value[0]||"object"!=typeof s.settings.value[0])return void console.error(`${cname()}:updateSetting:error: Settings values object not found at index 0`);const r=s.settings.value[0][o.id];void 0===r&&console.warn(`${cname()}:updateSetting: Creating new setting '${o.id}'`),s.settings.value[0][o.id]=o.value,e.perm.configs=s,console.log(`${cname()}:updateSetting:success:`,{id:o.id,oldValue:r,newValue:o.value}),"mcpServers"===o.id?(n.info("mcpServers setting changed, reloading all MCP connections"),function disconnectAllMcpServers(){n.info("Disconnecting all MCP servers");for(const[e,o]of Object.entries(t))if(o&&"function"==typeof o.disconnect)try{n.debug(`Disconnecting MCP server: ${e}`),o.disconnect()}catch(t){n.warn(`Error disconnecting from ${e}:`,t)}Object.keys(t).forEach(e=>delete t[e]),e.tools&&e.tools.tools&&Object.keys(e.tools.tools).forEach(t=>{delete e.tools.tools[t]});n.info("All MCP servers disconnected and cleaned up")}(),setTimeout(()=>{initMcpConnection()},250)):"enable_browser_tool"===o.id&&(n.info("enable_browser_tool setting changed, restarting all MCP connections"),Object.keys(t).forEach(async e=>{if(t[e]&&"function"==typeof t[e].restart)try{console.log(`${cname()}: Restarting MCP client for server: ${e}`),await t[e].restart(4e3),console.log(`${cname()}: Successfully restarted MCP client for server: ${e}`)}catch(t){console.error(`${cname()}: Failed to restart MCP client for server ${e}:`,t)}else console.warn(`${cname()}: Cannot restart MCP client for server ${e} - client not available or missing restart method`)}))}).catch(e=>{console.error(`${cname()}:updateSetting:error:`,e)}):console.error(`${cname()}:updateSetting:error: Invalid setting update: value is required`):console.error(`${cname()}:updateSetting:error: Invalid setting update: id must be a non-empty string`):console.error(`${cname()}:updateSetting:error: Invalid setting update: must be an object`)},e.pop=new Proxy({},{get(e,t){const n={prop:t,ret:"local_response"};return globalThis.pop_get(n)},set(e,t,n){const o={prop:t,value:n,sender:{tab:{id:null}},broadcast:null};globalThis.pop_set(o);return!0}}),this.perm_get=t=>(console.log(`${cname()}:perm_get:`,t),new Promise(n=>{e.perm[t.prop].then(e=>{t.result=e,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&chrome.runtime.sendMessage(t),n(!0)})})),this.perm_set=t=>(console.log(`${cname()}:perm_set:`,t),e.perm[t.prop]=t.value,Promise.resolve(!1)),this.perm_deleteProperty=t=>(console.log(`${cname()}:perm_deleteProperty:`,t),delete e.perm[t.prop],Promise.resolve(!1)),this.perm_ownKeys=t=>(console.log(`${cname()}:perm_ownKeys:`,t),new Promise(n=>{Object.keys(e.perm).then(e=>{t.result=e,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&chrome.runtime.sendMessage(t),n(!0)})})),this.perm_has=t=>(console.log(`${cname()}:perm_has:`,t),new Promise(n=>{(t.prop in e.perm).then(e=>{t.result=e,t.type=t.ret,t.sender?.tab?.id&&chrome.tabs.sendMessage(t.sender.tab.id,t),t?.broadcast&&chrome.runtime.sendMessage(t),n(!0)})})),chrome.runtime.onMessage.addListener((e,t,o)=>(n.log("✅got message from content script:",e,"sender:",t,"sendResponse:",o),e.sender=t,e.sendResponse=o,"test_from_js"===e.type?(console.log(`${cname()}:⚡⚡⚡Message from offscreen js.js:`,e),!1):this[e.type](e)));const r=["browser"],i=["scripts/security.js","scripts/json_loader.js","scripts/browser.js","scripts/mcp_sse_client.js","scripts/icons.js","scripts/notify.js","scripts/bstorage.js"];importScripts(...i),n.info(`MCP Link Extension ${MODULE_VERSION} logger initialized with scripts: ${i.join(", ")}`);const a={settings:{file:"settings.json",namespace:"settings"},servers:{file:"mcp_servers.json",namespace:"servers"}};async function loadAllConfigs(){n.debug("Starting configuration loading");const e={};for(const[t,o]of Object.entries(a))if(n.debug(`Loading ${t} from ${o.file||o.files}`),o.files){let n=null;for(const e of o.files){if(await bstorage.loadConfig(e,o.namespace)){const e=await bstorage.get(o.namespace);n=await o.merger(n,e)}}n?(await bstorage.set(o.namespace,"sites",n.value.sites),e[t]=!0):e[t]=!1}else e[t]=await bstorage.loadConfig(o.file,o.namespace);const t=Object.entries(e).filter(([,e])=>e).map(([e])=>e),o=Object.entries(e).filter(([,e])=>!e).map(([e])=>e);return 0===o.length?n.info(`Successfully loaded all configs: ${t.join(", ")}`):(n.error(`Failed to load configs: ${o.join(", ")}`),n.info(`Successfully loaded: ${t.join(", ")}`)),e}async function initMcpConnection(){n.info("Initializing MCP connections");try{const o=await e.pop["settings.mcpServers"];if(!o)throw new Error("No MCP server configurations found");for(const[s,i]of Object.entries(o)){const o=i.url.match(/^(https?:\/\/[^\/]+)/)?.[1];o?(n.info(`Initializing MCP client for ${s}: ${o} (SSE endpoint: ${i.url})`),t[s]=new McpSseClient(o,{sseUrl:i.url,headers:i.headers||{},onConnected:()=>{n.info(`Connected to MCP server ${s}: ${i.url}`)},onEndpoint:(e,o)=>{n.info(`Got MCP session for ${s}: ${o}`),t[s].listTools()},onMessage:async o=>{if(n.info("mcp sse Received",{serverId:s,data:o,mcp_link_tools:e.tools}),o&&o.result&&o.result.tools)n.info(`Received ${o.result.tools.length} tools from ${s}`),((e.tools??={}).tools??={})[s]={tools:o.result.tools,last_update:Date.now(),serverId:s},r.forEach(n=>{self[n]&&self[n]({type:"mcp_tools_update",tools:e.tools,serverId:s,mcpClient:t[s]})});else if(o&&o.reverse)self[o.reverse.tool]?(o.mcpClient=t[s],self[o.reverse.tool](o)):n.error(`No tool found for ${o.reverse.tool}`);else if(o?.result?.content&&Array.isArray(o.result.content)&&1==o.result.content.length&&o.result.content[0].text?.startsWith("Successfully registered tool:"))if(console.log(`${cname()}: got tool registration message - freshing tools list`,o),t[s]&&"function"==typeof t[s].listTools)try{t[s].listTools(),n.debug(`Requested updated tools list from ${s}`)}catch(e){n.warn(`Failed to request tools list from ${s}:`,e)}else n.warn(`Cannot refresh tools list - mcpClient[${s}] not available or missing listTools method`);else{const t=e.tools[o.id]||{};t.result=o?.error?o.error:o?.result,t.done=!0,t.callback?(console.log(`${cname()}: calling callback for ${o.id}`,{data:o,result:t}),t.callback(t.result)):console.log(`${cname()}: no callback for ${o.id} - just set result and done=true`,{data:o,result:t})}},logFunction:(...e)=>n.debug(`[${s}]`,...e)}),t[s].connect()):n.error(`Invalid URL format for server ${s}: ${i.url}`)}n.info("All MCP connections initialized")}catch(e){n.error("Failed to initialize MCP connections:",e)}}const c=Date.now(),l={isActive:!1,lastActivity:Date.now(),reconnectAttempts:0,maxReconnectAttempts:10,reconnectDelay:1e3,keepaliveInterval:null,healthCheckInterval:null};function setupKeepalive(){n.info("Setting up keepalive system"),chrome.alarms.create("keepalive",{delayInMinutes:1,periodInMinutes:1}),l.healthCheckInterval=setInterval(()=>{checkConnectionHealth()},3e4),l.isActive=!0,updateLastActivity()}function updateLastActivity(){l.lastActivity=Date.now()}function checkConnectionHealth(){Date.now()-l.lastActivity>12e4&&(n.warn("No activity detected for 2 minutes, checking MCP connections"),reconnectAllMcpServers());for(const[e,o]of Object.entries(t))o&&"function"==typeof o.isConnected&&!o.isConnected()&&(n.warn(`MCP server ${e} disconnected, attempting reconnection`),reconnectMcpServer(e))}function reconnectMcpServer(e){if(l.reconnectAttempts>=l.maxReconnectAttempts)return void n.error(`Max reconnection attempts reached for ${e}`);l.reconnectAttempts++,n.info(`Reconnecting to MCP server ${e} (attempt ${l.reconnectAttempts})`);const o=l.reconnectDelay*Math.pow(2,l.reconnectAttempts-1);setTimeout(async()=>{try{t[e]?await t[e].connect():await initMcpConnection(),l.reconnectAttempts=0,l.reconnectDelay=1e3,updateLastActivity(),n.info(`Successfully reconnected to MCP server ${e}`)}catch(t){n.error(`Failed to reconnect to MCP server ${e}:`,t)}},o)}function reconnectAllMcpServers(){n.info("Reconnecting all MCP servers");for(const e of Object.keys(t))reconnectMcpServer(e)}function miniMinify(e){if("string"!=typeof e||!e)return e;const t=[],n=e.length;let o=0;const isIdentStart=e=>/[A-Za-z_$]/.test(e),isIdentPart=e=>/[A-Za-z0-9_$]/.test(e),isDigit=e=>/[0-9]/.test(e);function readWhile(t){let s="";for(;o<n&&t(e[o]);)s+=e[o++];return s}function readString(t){let s=t;for(o++;o<n;){const r=e[o++];if(s+=r,"\\"===r&&o<n)s+=e[o++];else if(r===t)break}return{type:"string",value:s}}function readTemplate(){let t="`";for(o++;o<n;){const s=e[o++];if(t+=s,"\\"===s&&o<n)t+=e[o++];else{if("`"===s)break;"$"===s&&"{"===e[o]&&(t+="{",o++,t+=readTemplateExpr())}}return{type:"template",value:t}}function readTemplateExpr(){let s=1,r="";for(;o<n&&s>0;){const i=e[o];"'"!==i&&'"'!==i?"`"!==i?"/"!==i||"/"!==e[o+1]&&"*"!==e[o+1]?"/"===i&&maybeRegex()?r+=t.pop().value:"{"!==i?"}"!==i?"\\"!==i?(r+=i,o++):(r+=i,o++,o<n&&(r+=e[o++])):(s--,r+=i,o++):(s++,r+=i,o++):skipComment():r+=readTemplate().value:r+=readString(i).value}return r}function skipComment(){if("/"!==e[o+1]){if("*"===e[o+1]){for(o+=2;o<n&&("*"!==e[o]||"/"!==e[o+1]);)o++;o<n&&(o+=2)}}else for(o+=2;o<n&&"\n"!==e[o]&&"\r"!==e[o];)o++}function readNumber(){let t=readWhile(isDigit);return"."===e[o]&&isDigit(e[o+1])&&(t+=e[o++],t+=readWhile(isDigit)),{type:"number",value:t}}function readIdentifier(){let t=e[o++];return t+=readWhile(isIdentPart),{type:"identifier",value:t}}function maybeRegex(){const s=lastSignificant(t);if("/"!==e[o])return!1;if("/"===e[o+1]||"*"===e[o+1])return!1;if(!(!s||"punct"===s.type&&/[({\[;,?:!~+\-*\/%&|^=<>]/.test(s.value)||"keyword"===s.type&&/^(return|typeof|delete|void|in|instanceof|new|throw|case)$/.test(s.value)))return!1;let r=o+1,i=!1,a=!1;for(;r<n;){const t=e[r];if(a)a=!1;else{if("\\"===t){a=!0,r++;continue}if("["===t)i=!0;else if("]"===t&&i)i=!1;else if("/"===t&&!i)break}r++}if(r>=n)return!1;let c=r+1;for(;c<n&&/[a-z]/i.test(e[c]);)c++;const l=e.slice(o,c);return t.push({type:"regex",value:l}),o=c,!0}function lastSignificant(e){for(let t=e.length-1;t>=0;t--){const n=e[t];if("space"!==n.type&&"newline"!==n.type)return n}return null}for(;o<n;){const n=e[o];if(" "===n||"\t"===n){readWhile(e=>" "===e||"\t"===e),t.push({type:"space",value:" "});continue}if("\n"===n||"\r"===n){o++,t.push({type:"newline",value:"\n"});continue}if("/"===n&&("/"===e[o+1]||"*"===e[o+1])){skipComment();continue}if("'"===n||'"'===n){t.push(readString(n));continue}if("`"===n){t.push(readTemplate());continue}if("/"===n&&maybeRegex())continue;if(isDigit(n)){t.push(readNumber());continue}if(isIdentStart(n)){const e=readIdentifier();/^(return|break|continue|throw|yield|typeof|delete|void|in|instanceof|new)$/.test(e.value)&&(e.type=/^(return|break|continue|throw|yield)$/.test(e.value)?"asiKeyword":"keyword"),t.push(e);continue}const s=["===","!==",">>>",">>=","<<=","**=","&&=","||=","??=","=>","++","--","<=",">=","==","!=","&&","||","??","**",">>","<<","+=","-=","*=","/=","%=","&=","|=","^="];let r=null;for(const t of s)if(e.startsWith(t,o)){r=t;break}r?(t.push({type:"punct",value:r}),o+=r.length):(t.push({type:"punct",value:n}),o++)}let s="";function needsSpace(e,t){if(!e)return!1;if("space"===e.type||"newline"===e.type)return!1;if("space"===t.type||"newline"===t.type)return!1;const n="identifier"===e.type||"number"===e.type||"asiKeyword"===e.type||"keyword"===e.type,o="identifier"===t.type||"number"===t.type||"asiKeyword"===t.type||"keyword"===t.type;return!(!n||!o)||!("++"!==e.value&&"--"!==e.value||!o)}for(let e=0;e<t.length;e++){const n=t[e];if("space"===n.type)continue;if("newline"===n.type){const n=lastSignificant(t.slice(0,e)),o=function(){for(let n=e+1;n<t.length;n++)if("space"!==t[n].type&&"newline"!==t[n].type)return t[n];return null}();let r=!1;n&&"asiKeyword"===n.type?r=!0:(!o||("punct"!==o.type||"("!==o.value&&"["!==o.value)&&"template"!==o.type)&&(!n||!o||"identifier"!==n.type&&"number"!==n.type&&"regex"!==n.type&&")"!==n.value&&"]"!==n.value&&"}"!==n.value||"identifier"!==o.type&&"number"!==o.type&&"template"!==o.type&&"("!==o.value&&"["!==o.value)||(r=!0),r&&(s+=";");continue}needsSpace(function(){let n=e-1;for(;n>=0;){if("space"!==t[n].type&&"newline"!==t[n].type)return t[n];n--}return null}(),n)&&(s+=" "),s+=n.value}return s}miniMinify("(function() {\nfunction detectFrameworks() {\nconst detected = [];\nconst failures = [];\n\nfunction safeDetect(name, fn) {\n  try {\n    const result = fn();\n    if (result) detected.push(`${name}: ${result}`);\n  } catch (e) {\n    failures.push(`${name}: ${e.message}`);\n  }\n}\n\n// Core JavaScript Frameworks\nsafeDetect('React', () => {\n  const indicators = [];\n  if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) indicators.push('DevTools');\n  if (window.React) indicators.push('Global');\n  \n  // Check for React-specific window keys\n  Object.keys(window).forEach(k => {\n    if (/^__react/i.test(k)) indicators.push(`window.${k}`);\n  });\n  \n  // Check for React DOM properties\n  const els = document.querySelectorAll('*');\n  for (let el of els) {\n    for (let prop in el) {\n      if (prop.startsWith('__react')) {\n        indicators.push('DOM Props');\n        break;\n      }\n    }\n    if (indicators.includes('DOM Props')) break;\n  }\n  \n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Vue.js', () => {\n  const indicators = [];\n  \n  // Vue 3 detection (most reliable for modern Vue apps)\n  if (window.__VUE__) {\n    indicators.push('v3 App');\n  }\n  \n  // Vue 2/3 DevTools hook\n  if (window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n    indicators.push('DevTools');\n  }\n  \n  // Global Vue (less common in modern apps)\n  if (window.Vue) {\n    indicators.push(`Global v${window.Vue.version || 'unknown'}`);\n  }\n  \n  // Vue scoped CSS (very reliable indicator)\n  const scopedElements = document.querySelectorAll('[data-v-]');\n  if (scopedElements.length > 0) {\n    indicators.push(`${scopedElements.length} Scoped CSS`);\n  }\n  \n  // Vue directives (reliable but less common)\n  const directiveElements = document.querySelectorAll('[v-show], [v-if], [v-for], [v-model], [v-on], [v-bind], [v-html], [v-text], [v-cloak], [v-once], [v-pre]');\n  if (directiveElements.length > 0) {\n    indicators.push(`${directiveElements.length} Directives`);\n  }\n  \n  // Vue SSR marker\n  if (document.querySelector('[data-server-rendered]')) {\n    indicators.push('SSR');\n  }\n  \n  // Vue 3 SSR setters (GitLab pattern)\n  if (window.__VUE_SSR_SETTERS__ || window.__VUE_INSTANCE_SETTERS__) {\n    indicators.push('SSR Setters');\n  }\n  \n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Angular', () => {\n  const indicators = [];\n  if (window.ng) indicators.push('Global');\n  if (document.querySelector('[ng-version]')) indicators.push(`v${document.querySelector('[ng-version]').getAttribute('ng-version')}`);\n  if (document.querySelector('[_ngcontent-]')) indicators.push('Component Encapsulation');\n  if (document.querySelector('app-root')) indicators.push('App Root');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('jQuery', () => {\n  const indicators = [];\n  if (window.jQuery) indicators.push(`v${window.jQuery.fn.jquery}`);\n  if (window.$) indicators.push('$ Global');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Next.js', () => {\n  const indicators = [];\n  if (window.__NEXT_DATA__) indicators.push('Data');\n  const nextScripts = document.querySelectorAll('script[src*=\"_next\"]').length;\n  if (nextScripts > 0) indicators.push(`${nextScripts} Scripts`);\n  const nextClasses = document.querySelectorAll('[class*=\"_next\"]').length;\n  if (nextClasses > 0) indicators.push(`${nextClasses} Classes`);\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Svelte', () => {\n  const indicators = [];\n  if (document.querySelector('[data-svelte-h]')) indicators.push('Hydration');\n  if (document.querySelector('[data-svelte-kit]')) indicators.push('SvelteKit');\n  const svelteAttrs = document.querySelectorAll('[class*=\"svelte-\"]').length;\n  if (svelteAttrs > 0) indicators.push(`${svelteAttrs} Classes`);\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Alpine.js', () => {\n  const indicators = [];\n  if (window.Alpine) indicators.push('Global');\n  const xData = document.querySelectorAll('[x-data]').length;\n  if (xData > 0) indicators.push(`${xData} x-data`);\n  const alpineDirectives = document.querySelectorAll('[x-show], [x-if], [x-for], [x-on], [x-model], [x-text], [x-html]').length;\n  if (alpineDirectives > 0) indicators.push(`${alpineDirectives} Directives`);\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Ember.js', () => {\n  const indicators = [];\n  if (window.Ember) indicators.push('Global');\n  if (window.__ember_application__) indicators.push('Application');\n  const emberEls = document.querySelectorAll('[id^=\"ember\"]').length;\n  if (emberEls > 0) indicators.push(`${emberEls} Elements`);\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('DraftJS', () => {\n  const indicators = [];\n  \n  // Global DraftJS object\n  if (window.Draft) indicators.push('Global Draft');\n  \n  // DraftJS-specific CSS classes (most reliable indicator)\n  const draftClasses = [\n    '.public-DraftEditor-content',\n    '.DraftEditor-root', \n    '.DraftEditor-editorContainer',\n    '.public-DraftEditorPlaceholder-root',\n    '.notranslate.public-DraftEditor-content'\n  ];\n  \n  let foundClasses = 0;\n  draftClasses.forEach(className => {\n    const elements = document.querySelectorAll(className);\n    if (elements.length > 0) {\n      foundClasses++;\n      indicators.push(`${className.replace('.', '')}: ${elements.length}`);\n    }\n  });\n  \n  // DraftJS data attributes\n  const draftDataAttrs = document.querySelectorAll('[data-contents], [data-block], [data-offset-key]').length;\n  if (draftDataAttrs > 0) indicators.push(`${draftDataAttrs} Data Attrs`);\n  \n  // DraftJS contenteditable with specific structure\n  const draftEditables = [...document.querySelectorAll('[contenteditable=\"true\"]')].filter(el => {\n    const parent = el.parentElement;\n    return parent && (parent.className.includes('DraftEditor') || \n                      parent.className.includes('public-DraftEditor') ||\n                      el.className.includes('notranslate'));\n  });\n  if (draftEditables.length > 0) indicators.push(`${draftEditables.length} Editors`);\n  \n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Web Components', () => {\n  const indicators = [];\n  const customEls = document.querySelectorAll(':defined').length;\n  if (customEls > 0) indicators.push(`${customEls} Custom Elements`);\n  const shadowRoots = [...document.querySelectorAll('*')].filter(el => el.shadowRoot).length;\n  if (shadowRoots > 0) indicators.push(`${shadowRoots} Shadow DOM`);\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\n// Additional DOM/Tech Detection for AI Context\nsafeDetect('CSS Framework', () => {\n  const indicators = [];\n  if (document.querySelector('[class*=\"bootstrap\"]') || document.querySelector('link[href*=\"bootstrap\"]')) indicators.push('Bootstrap');\n  if (document.querySelector('[class*=\"tailwind\"]') || document.querySelector('script[src*=\"tailwind\"]')) indicators.push('Tailwind');\n  if (document.querySelector('[class*=\"material\"]') || document.querySelector('link[href*=\"material\"]')) indicators.push('Material');\n  if (document.querySelector('[class*=\"bulma\"]') || document.querySelector('link[href*=\"bulma\"]')) indicators.push('Bulma');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('UI Libraries', () => {\n  const indicators = [];\n  if (window.AntDesign || document.querySelector('[class*=\"ant-\"]')) indicators.push('Ant Design');\n  if (window.MaterialUI || document.querySelector('[class*=\"MuiBox\"], [class*=\"MuiButton\"]')) indicators.push('Material-UI');\n  if (document.querySelector('[class*=\"chakra-\"]')) indicators.push('Chakra UI');\n  if (document.querySelector('[data-reach-]')) indicators.push('Reach UI');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('State Management', () => {\n  const indicators = [];\n  if (window.__REDUX_DEVTOOLS_EXTENSION__) indicators.push('Redux');\n  if (window.MobX) indicators.push('MobX');\n  if (window.Vuex) indicators.push('Vuex');\n  if (window.Pinia) indicators.push('Pinia');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Build Tools', () => {\n  const indicators = [];\n  if (document.querySelector('script[src*=\"webpack\"]')) indicators.push('Webpack');\n  if (document.querySelector('script[src*=\"vite\"]')) indicators.push('Vite');\n  if (document.querySelector('script[src*=\"parcel\"]')) indicators.push('Parcel');\n  if (window.__webpack_require__) indicators.push('Webpack Runtime');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Analytics & Tracking', () => {\n  const indicators = [];\n  if (window.gtag || window.ga) indicators.push('Google Analytics');\n  if (window.fbq) indicators.push('Facebook Pixel');\n  if (window.mixpanel) indicators.push('Mixpanel');\n  if (window.amplitude) indicators.push('Amplitude');\n  if (document.querySelector('script[src*=\"hotjar\"]')) indicators.push('Hotjar');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Content Management', () => {\n  const indicators = [];\n  if (document.querySelector('meta[name=\"generator\"][content*=\"WordPress\"]')) indicators.push('WordPress');\n  if (document.querySelector('meta[name=\"generator\"][content*=\"Drupal\"]')) indicators.push('Drupal');\n  if (document.querySelector('script[src*=\"contentful\"]')) indicators.push('Contentful');\n  if (window.Shopify) indicators.push('Shopify');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\nsafeDetect('Page Architecture', () => {\n  const indicators = [];\n  if (window.history && window.history.pushState) indicators.push('SPA Routing');\n  const iframes = document.querySelectorAll('iframe').length;\n  if (iframes > 0) indicators.push(`${iframes} iFrames`);\n  const canvas = document.querySelectorAll('canvas').length;\n  if (canvas > 0) indicators.push(`${canvas} Canvas`);\n  const svg = document.querySelectorAll('svg').length;\n  if (svg > 0) indicators.push(`${svg} SVG`);\n  const testIds = document.querySelectorAll('[data-testid]').length;\n  if (testIds > 0) indicators.push('Test IDs Present');\n  return indicators.length > 0 ? indicators.join(', ') : null;\n});\n\n// Generate simple text output\nconst lines = [];\nlines.push('\\nWeb tech stack:-');\n\nif (detected.length > 0) {\n  detected.forEach(item => lines.push(`${item}`));\n} else {\n  lines.push('No major frameworks detected');\n}\n\nif (failures.length > 0) {\n  lines.push('');\n  lines.push('Detection failures:');\n  failures.forEach(failure => lines.push(`⚠ ${failure}`));\n}\n\nlines.push('');\n\nreturn lines.join('\\n');\n}\n\nreturn detectFrameworks();\n})();\n");async function getConfigs(t=!1){try{const o=t?null:await e.perm.configs;if(o&&"object"==typeof o&&Object.keys(o).length>0)return n.info("Loaded configs from permanent storage"),o;n.info(t?"Configuration reset requested - discarding permanent storage, re-loading from JSON files":"No configs in permanent storage, loading from JSON files");const s=await loadAllConfigs();return s.serverConfigs=await bstorage.get("servers","mcpServers"),s.settings=await bstorage.get("settings","settings"),e.perm.configs=s,reloaded=await e.perm.configs,n.info("Loaded configs from JSON files and saved to permanent storage",{reloaded}),s}catch(t){n.error("Failed to load configs from storage, falling back to JSON files:",t);const o=await loadAllConfigs();o.serverConfigs=await bstorage.get("servers","mcpServers"),o.settings=await bstorage.get("settings","settings");try{e.perm.configs=o,reloaded=await e.perm.configs,n.info("configs saved to permanent storage",{reloaded})}catch(e){n.warn("Failed to save configs to permanent storage:",e)}return o}}function performExtensionStartup(e={reason:"manual",previousVersion:null}){n.info(`Extension startup initiated. Reason: ${e.reason}, Previous Version: ${e.previousVersion}`),setupKeepalive(),getConfigs().then(t=>{switch(t.servers&&(n.info("Initializing MCP connection with loaded server config"),initMcpConnection()),t.servers&&mcpIcons.initialize().then(()=>{n.debug("Icons initialized successfully")}).catch(e=>{n.error("Failed to initialize icons:",e)}),function setupMcpFloatingAssistant(){n.info("Setting up MCP Floating Assistant context menu and handlers"),chrome.contextMenus.removeAll(()=>{chrome.contextMenus.create({id:"mcp-floating-assistant",title:"Ask AI (Open MCP-Link Assistant)",contexts:["all"]}),n.info("MCP Floating Assistant context menu created")}),chrome.contextMenus.onClicked.addListener(async(e,t)=>{"mcp-floating-assistant"===e.menuItemId&&((e=e||{}).popTab||(e.popTab="chat"),console.log("MCP Assistant context menu clicked",{tabId:t.id,info:e,tab:t}),globalThis.showUI(t,e).then(e=>{console.log(`${cname()}: Context menu UI closed with result:`,e)}).catch(e=>{console.log(`${cname()}: Context menu UI closed with error:`,e)}))});chrome.runtime.onMessage.hasListener&&chrome.runtime.onMessage.listeners;chrome.runtime.onMessage.addListener((e,t,o)=>"inject_floating_assistant"===e.type?(chrome.scripting.executeScript({target:{tabId:t.tab.id},func:injectFloatingAssistantCode,args:[e.data]}).catch(e=>{n.error("Failed to inject floating assistant code",e)}),!1):"floating_assistant_ready"===e.type&&(n.info("Floating assistant ready in tab",t.tab.id),!1))}(),e.reason){case"install":n.info("Extension installed for the first time");break;case"update":n.info(`Extension updated from version ${e.previousVersion}`);break;case"chrome_update":n.info("Chrome browser updated - verifying extension state");break;case"manual":n.info("Manual startup requested")}n.info(`Extension startup completed in ${Date.now()-c}ms`)}).catch(e=>{n.error("Extension startup failed:",e)})}function safeClone(e){const t=new WeakSet,clone=e=>void 0===e?null:"function"==typeof e||"symbol"==typeof e?e.toString():null===e||"object"!=typeof e?e:t.has(e)?null:(t.add(e),Array.isArray(e)?e.map(clone):Object.fromEntries(Object.entries(e).map(([e,t])=>{try{return[e,clone(t)]}catch{return[e,null]}})));return clone(e)}async function getPopoverHTML(e){try{console.log("💡💡getting popover HTML");const t=await fetch(chrome.runtime.getURL("pages/popover.html"));return e?.promreturn?t.text():await t.text()}catch(e){return console.log(`${cname()}:❌Failed to load popover HTML:`,e),`<div style="padding: 20px; text-align: center;">Failed to load popover content: ${e}</div>`}}function injectFloatingAssistantCode(e={}){console.log("injectFloatingAssistantCode",e),window.mcpFloatingAssistant?window.mcpFloatingAssistant.show(e):(window.mcpFloatingAssistant={isVisible:!1,isPointerMode:!1,currentPopover:null,show(e={}){this.isVisible||(this.createPopover(e),this.isVisible=!0)},hide(){this.currentPopover&&(this.currentPopover.remove(),this.currentPopover=null),this.exitPointerMode(),this.isVisible=!1},createPopover(e){const t=document.createElement("div");t.id="mcp-floating-assistant";const n=e.clickX||Math.min(window.innerWidth-380,100),o=e.clickY||Math.min(window.innerHeight-300,100);t.style.cssText=`\n        position: fixed;\n        left: ${n}px;\n        top: ${o}px;\n        width: 360px;\n        min-height: 200px;\n        background: #ffffff;\n        border: 1px solid #e1e5e9;\n        border-radius: 12px;\n        box-shadow: 0 8px 32px rgba(0,0,0,0.15), 0 2px 8px rgba(0,0,0,0.1);\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        font-size: 14px;\n        z-index: 2147483647;\n        resize: both;\n        overflow: hidden;\n        backdrop-filter: blur(10px);\n        transition: all 0.2s ease;\n      `,t.innerHTML=this.getPopoverHTML(e),document.body.appendChild(t),this.currentPopover=t,this.setupEventHandlers(t,e);const s=t.querySelector("#mcp-input");s&&s.focus()},getPopoverHTML:e=>`\n        <div id="mcp-header" style="\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 12px 16px;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n          border-radius: 12px 12px 0 0;\n          cursor: move;\n          user-select: none;\n        ">\n          <div style="display: flex; align-items: center; gap: 8px;">\n            <span style="font-size: 16px;">🧠</span>\n            <span style="font-weight: 600;">MCP Assistant</span>\n          </div>\n          <div style="display: flex; align-items: center; gap: 8px;">\n            <button id="mcp-pointer-btn" style="\n              background: rgba(255,255,255,0.2);\n              border: 1px solid rgba(255,255,255,0.3);\n              color: white;\n              border-radius: 6px;\n              padding: 4px 8px;\n              cursor: pointer;\n              font-size: 12px;\n              transition: all 0.2s ease;\n            " title="Toggle pointer mode">\n              <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">\n                <path d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z"/>\n              </svg>\n            </button>\n            <button id="mcp-close-btn" style="\n              background: rgba(255,255,255,0.2);\n              border: 1px solid rgba(255,255,255,0.3);\n              color: white;\n              border-radius: 6px;\n              padding: 4px 8px;\n              cursor: pointer;\n              font-size: 12px;\n              transition: all 0.2s ease;\n            ">✕</button>\n          </div>\n        </div>\n        \n        <div style="padding: 16px;">\n          <div style="position: relative; margin-bottom: 12px;">\n            <textarea id="mcp-input" placeholder="${e.selectionText&&e.selectionText.trim()?"Ask about the selected text...":"What would you like to know about this page?"}" style="\n              width: 100%;\n              min-height: 80px;\n              padding: 12px;\n              border: 2px solid #e1e5e9;\n              border-radius: 8px;\n              font-family: inherit;\n              font-size: 14px;\n              resize: vertical;\n              outline: none;\n              transition: border-color 0.2s ease;\n              box-sizing: border-box;\n            ">${e.selectionText||""}</textarea>\n          </div>\n          \n          <div style="display: flex; gap: 8px; flex-wrap: wrap;">\n            <button id="mcp-ask-btn" style="\n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              color: white;\n              border: none;\n              border-radius: 6px;\n              padding: 8px 16px;\n              cursor: pointer;\n              font-weight: 500;\n              transition: all 0.2s ease;\n            ">Ask</button>\n            \n            <button id="mcp-explain-btn" style="\n              background: #f8f9fa;\n              color: #495057;\n              border: 1px solid #dee2e6;\n              border-radius: 6px;\n              padding: 8px 16px;\n              cursor: pointer;\n              transition: all 0.2s ease;\n            ">Explain</button>\n            \n            <button id="mcp-summarize-btn" style="\n              background: #f8f9fa;\n              color: #495057;\n              border: 1px solid #dee2e6;\n              border-radius: 6px;\n              padding: 8px 16px;\n              cursor: pointer;\n              transition: all 0.2s ease;\n            ">Summarize</button>\n          </div>\n          \n          <div id="mcp-response" style="\n            margin-top: 12px;\n            padding: 12px;\n            background: #f8f9fa;\n            border-radius: 8px;\n            display: none;\n            max-height: 200px;\n            overflow-y: auto;\n          "></div>\n          \n          <div id="mcp-pointer-hint" style="\n            margin-top: 12px;\n            padding: 8px 12px;\n            background: #e3f2fd;\n            border: 1px solid #bbdefb;\n            border-radius: 6px;\n            color: #1565c0;\n            font-size: 12px;\n            display: none;\n          ">\n            🎯 Pointer mode active - click on any element to ask about it, or click here to exit\n          </div>\n        </div>\n      `,setupEventHandlers(e,t){const n=e.querySelector("#mcp-header");let o=!1,s={x:0,y:0};n.addEventListener("mousedown",t=>{o=!0;const n=e.getBoundingClientRect();s.x=t.clientX-n.left,s.y=t.clientY-n.top,document.body.style.userSelect="none"}),document.addEventListener("mousemove",t=>{if(!o)return;const n=Math.max(0,Math.min(window.innerWidth-e.offsetWidth,t.clientX-s.x)),r=Math.max(0,Math.min(window.innerHeight-e.offsetHeight,t.clientY-s.y));e.style.left=n+"px",e.style.top=r+"px"}),document.addEventListener("mouseup",()=>{o=!1,document.body.style.userSelect=""}),e.querySelector("#mcp-close-btn").addEventListener("click",()=>{this.hide()}),e.querySelector("#mcp-pointer-btn").addEventListener("click",()=>{this.togglePointerMode()}),e.querySelector("#mcp-ask-btn").addEventListener("click",()=>{this.handleAction("ask")}),e.querySelector("#mcp-explain-btn").addEventListener("click",()=>{this.handleAction("explain")}),e.querySelector("#mcp-summarize-btn").addEventListener("click",()=>{this.handleAction("summarize")});const r=e.querySelector("#mcp-input");r.addEventListener("keydown",e=>{"Enter"===e.key&&(e.ctrlKey||e.metaKey)&&this.handleAction("ask")}),r.addEventListener("focus",()=>{r.style.borderColor="#667eea"}),r.addEventListener("blur",()=>{r.style.borderColor="#e1e5e9"});e.querySelector("#mcp-pointer-hint").addEventListener("click",()=>{this.exitPointerMode()})},togglePointerMode(){this.isPointerMode?this.exitPointerMode():this.enterPointerMode()},enterPointerMode(){this.isPointerMode=!0,document.body.style.cursor="crosshair";const e=this.currentPopover.querySelector("#mcp-pointer-hint"),t=this.currentPopover.querySelector("#mcp-pointer-btn");e.style.display="block",t.style.background="rgba(255,255,255,0.4)",document.addEventListener("click",this.handleElementClick,!0),document.addEventListener("mouseover",this.handleElementHover,!0),document.addEventListener("mouseout",this.handleElementUnhover,!0)},exitPointerMode(){if(this.isPointerMode=!1,document.body.style.cursor="",this.currentPopover){const e=this.currentPopover.querySelector("#mcp-pointer-hint"),t=this.currentPopover.querySelector("#mcp-pointer-btn");e.style.display="none",t.style.background="rgba(255,255,255,0.2)"}document.removeEventListener("click",this.handleElementClick,!0),document.removeEventListener("mouseover",this.handleElementHover,!0),document.removeEventListener("mouseout",this.handleElementUnhover,!0),document.querySelectorAll(".mcp-hover-highlight").forEach(e=>{e.classList.remove("mcp-hover-highlight")})},handleElementClick:function(e){if(!window.mcpFloatingAssistant.isPointerMode)return;if(e.target.closest("#mcp-floating-assistant"))return;e.preventDefault(),e.stopPropagation();const t=e.target,n=window.mcpFloatingAssistant.extractElementContext(t),o=window.mcpFloatingAssistant.currentPopover.querySelector("#mcp-input"),s=o.value.trim(),r=s?`${s}\n\nAlso, about this element: ${n}`:`Tell me about this: ${n}`;o.value=r,o.focus(),window.mcpFloatingAssistant.exitPointerMode()},handleElementHover:function(e){if(window.mcpFloatingAssistant.isPointerMode&&!e.target.closest("#mcp-floating-assistant")&&(e.target.classList.add("mcp-hover-highlight"),!document.querySelector("#mcp-hover-styles"))){const e=document.createElement("style");e.id="mcp-hover-styles",e.textContent="\n          .mcp-hover-highlight {\n            outline: 2px solid #667eea !important;\n            outline-offset: 2px !important;\n            background: rgba(102, 126, 234, 0.1) !important;\n          }\n        ",document.head.appendChild(e)}},handleElementUnhover:function(e){window.mcpFloatingAssistant.isPointerMode&&e.target.classList.remove("mcp-hover-highlight")},extractElementContext(e){const t=e.tagName.toLowerCase(),n=e.textContent?.trim().substring(0,100)||"";let o=`${t}${e.id?`#${e.id}`:""}${e.className?`.${e.className.split(" ").join(".")}`:""}`;return n&&(o+=`: "${n}"`),"img"===t&&e.src&&(o+=` (src: ${e.src})`),"a"===t&&e.href&&(o+=` (href: ${e.href})`),e.title&&(o+=` (title: ${e.title})`),o},handleAction(e){const t=this.currentPopover.querySelector("#mcp-input"),n=this.currentPopover.querySelector("#mcp-response"),o=t.value.trim();o?(n.style.display="block",n.innerHTML=`\n        <div style="display: flex; align-items: center; gap: 8px; color: #666;">\n          <div style="\n            width: 16px;\n            height: 16px;\n            border: 2px solid #e1e5e9;\n            border-top: 2px solid #667eea;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n          "></div>\n          Processing your ${e} request...\n        </div>\n        <style>\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        </style>\n      `,setTimeout(()=>{n.innerHTML=`\n          <div style="color: #495057;">\n            <strong>${e.charAt(0).toUpperCase()+e.slice(1)} response:</strong><br>\n            This is where the MCP response would appear. Your request: "${o}"\n            <br><br>\n            <em>Integration with your existing MCP system would go here.</em>\n          </div>\n        `},1500)):t.focus()}},e&&Object.keys(e).length>0&&window.mcpFloatingAssistant.show(e),chrome.runtime.sendMessage({type:"floating_assistant_ready"}).catch(()=>{}))}chrome.runtime.onInstalled.addListener(async e=>{n.info("⚡ onInstalled event")}),chrome.tabs.onRemoved.addListener((e,t)=>{n.debug(`Tab ${e} closed, isWindowClosing: ${t.isWindowClosing}`),o.has(e)&&(o.delete(e),n.debug(`Removed access token for closed tab ${e}`))}),chrome.runtime.onSuspend.addListener(()=>{n.info("Extension is being suspended - preserving state"),l.healthCheckInterval&&clearInterval(l.healthCheckInterval),chrome.storage.local.set({mcp_connection_state:{lastActivity:l.lastActivity,wasActive:l.isActive,timestamp:Date.now()}});for(const[e,o]of Object.entries(t))if(o&&"function"==typeof o.disconnect)try{o.disconnect(),n.debug(`Gracefully disconnected from ${e}`)}catch(t){n.warn(`Error disconnecting from ${e}:`,t)}}),chrome.runtime.onSuspendCanceled.addListener(()=>{n.info("Extension suspension cancelled - resuming operations"),setupKeepalive(),reconnectAllMcpServers()}),chrome.alarms.onAlarm.addListener(e=>{"keepalive"===e.name&&(updateLastActivity(),chrome.storage.local.get(["mcp_connection_state"],e=>{chrome.runtime.lastError&&n.debug("Storage access during keepalive")}))}),chrome.tabs.onActivated.addListener(e=>{n.debug("Tab activated, updating activity"),updateLastActivity(),checkConnectionHealth()}),chrome.windows.onFocusChanged.addListener(e=>{e!==chrome.windows.WINDOW_ID_NONE&&(n.debug("Window focused, updating activity"),updateLastActivity(),checkConnectionHealth())}),chrome.webNavigation?.onCompleted?.addListener&&chrome.webNavigation.onCompleted.addListener(e=>{0===e.frameId&&(n.debug("Navigation completed, updating activity"),updateLastActivity())}),chrome.runtime.onStartup.addListener(async e=>{n.info("⚡Extension starting up"),chrome.storage.local.get(["mcp_connection_state"],e=>{if(e.mcp_connection_state){const t=e.mcp_connection_state,o=Date.now()-t.timestamp;n.info(`Restored from suspension after ${o}ms`),t.wasActive&&(l.lastActivity=t.lastActivity)}}),performExtensionStartup(e)}),chrome.action.onClicked.addListener(e=>{n.info("🖱️ Extension icon clicked; 📍 Active tab:",e.url),chrome.action.setBadgeText({text:""})}),chrome.runtime.onConnect.addListener(e=>{n.info("🔗 Connection established:",e.name),e.onMessage.addListener(e=>{n.info("📨 Port message:",e)})}),self.addEventListener("activate",e=>{n.info("⚡ Service worker activated"),performExtensionStartup(e)});
